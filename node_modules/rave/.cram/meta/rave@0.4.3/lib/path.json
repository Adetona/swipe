{"absId":"rave@0.4.3/lib/path","pluginId":"curl/loader/cjsm11","resourceId":"rave@0.4.3/lib/path","loader":true,"source":"define('rave@0.4.3/lib/path',['require','exports','module'],function(require,exports,module,define){/** @license MIT License (c) copyright 2014 original authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\nvar absUrlRx, findDotsRx;\n\nabsUrlRx = /^\\/|^[^:]+:\\/\\//;\nfindDotsRx = /(\\.)(\\.?)(?:$|\\/([^\\.\\/]+.*)?)/g;\n\n/** @module path */\nmodule.exports = {\n\tisAbsUrl: isAbsUrl,\n\tisRelPath: isRelPath,\n\tjoinPaths: joinPaths,\n\tensureEndSlash: ensureEndSlash,\n\tensureExt: ensureExt,\n\tremoveExt: removeExt,\n\treduceLeadingDots: reduceLeadingDots,\n\tsplitDirAndFile: splitDirAndFile\n};\n\n/**\n * Returns true if the url is absolute (not relative to the document)\n * @param {string} url\n * @return {Boolean}\n */\nfunction isAbsUrl (url) {\n\treturn absUrlRx.test(url);\n}\n\n/**\n * Returns true if the path provided is relative.\n * @param {string} path\n * @return {Boolean}\n */\nfunction isRelPath (path) {\n\treturn path.charAt(0) == '.';\n}\n\n/**\n * Joins path parts together.\n * @param {...string} parts\n * @return {string}\n */\nfunction joinPaths () {\n\tvar result, parts;\n\tparts = Array.prototype.slice.call(arguments);\n\tresult = [parts.pop() || ''];\n\twhile (parts.length) {\n\t\tresult.unshift(ensureEndSlash(parts.pop()))\n\t}\n\treturn result.join('');\n}\n\n/**\n * Ensures a trailing slash (\"/\") on a string.\n * @param {string} path\n * @return {string}\n */\nfunction ensureEndSlash (path) {\n\treturn path && path.charAt(path.length - 1) !== '/'\n\t\t? path + '/'\n\t\t: path;\n}\n\n/**\n * Checks for an extension at the end of the url or file path.  If one isn't\n * specified, it is added.\n * @param {string} path is any url or file path.\n * @param {string} ext is an extension, starting with a dot.\n * @returns {string} a url with an extension.\n */\nfunction ensureExt (path, ext) {\n\tvar hasExt = path.lastIndexOf(ext) > path.lastIndexOf('/');\n\treturn hasExt ? path : path + ext;\n}\n\n/**\n * Removes a file extension from a path.\n * @param {string} path\n * @returns {string} path without a file extension.\n */\nfunction removeExt (path) {\n\tvar dotPos = path.lastIndexOf('.'), slashPos = path.lastIndexOf('/');\n\treturn dotPos > slashPos ? path.slice(0, dotPos) : path;\n}\n\n/**\n * Normalizes a CommonJS-style (or AMD) module id against a referring\n * module id.  Leading \"..\" or \".\" path specifiers are folded into\n * the referer's id/path.  Interprets module ids of \".\" and \"..\" as meaning\n * \"grab the module whose name is the same as my folder or parent folder\".\n * These special folder ids are not included in the AMD spec, but seem to\n * work in RequireJS, curl.js, and dojo -- as well as node.js.\n * @param {string} childId\n * @param {string} refId\n * @return {string}\n */\nfunction reduceLeadingDots (childId, refId) {\n\tvar removeLevels, normId, levels, diff;\n\n\tif (isRelPath(childId)) {\n\t\t// detect if childId refers to a directory or to a module\n\t\tremoveLevels = childId.slice(-1) === '.' ? 0 : 1;\n\n\t\t// replaceDots() also counts levels.\n\t\tnormId = childId.replace(findDotsRx, replaceDots);\n\n\t\tlevels = refId.split('/');\n\t\tdiff = levels.length - removeLevels;\n\n\t\tif (diff < 0) {\n\t\t\t// This is an attempt to navigate above parent module.\n\t\t\t// maybe this is a url? Punt and return url;\n\t\t\treturn childId;\n\t\t}\n\n\t\tlevels.splice(diff, removeLevels);\n\n\t\t// normId || [] prevents concat from adding extra \"/\" when\n\t\t// normId is reduced to a blank string.\n\t\treturn levels.concat(normId || []).join('/');\n\t}\n\telse {\n\t\treturn childId;\n\t}\n\n\tfunction replaceDots (m, dot, dblDot, remainder) {\n\t\tif (dblDot) removeLevels++;\n\t\treturn remainder || '';\n\t}\n}\n\nfunction splitDirAndFile (url) {\n\tvar parts, file;\n\tparts = url.split('/');\n\tfile = parts.pop();\n\treturn [\n\t\tparts.join('/'),\n\t\tfile\n\t];\n}\n\n});\n\n","modules":[{"pos":0,"count":99,"id":"rave@0.4.3/lib/path","depList":["require","exports","module"],"factory":true,"argList":["require","exports","module","define"]}],"compileTime":"2014-11-17T20:58:47.354Z"}