{"absId":"rave@0.4.3/lib/amd/captureDefines","pluginId":"curl/loader/cjsm11","resourceId":"rave@0.4.3/lib/amd/captureDefines","loader":true,"source":"define('rave@0.4.3/lib/amd/captureDefines',['require','exports','module'],function(require,exports,module,define){/** @license MIT License (c) copyright 2014 original authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nmodule.exports = captureDefines;\n\nfunction captureDefines (amdEval) {\n\tvar result;\n\n\tdefine.amd = { jQuery: {} };\n\n\treturn function (load) {\n\t\tresult = { named: [], isAnon: false, anon: void 0, called: false };\n\t\treturn capture(amdEval, define, load, result);\n\t};\n\n\tfunction define () {\n\t\treturn _define(result, arguments);\n\t}\n}\n\nfunction capture (amdEval, define, load, result) {\n\ttry {\n\t\tamdEval(global, define, load.source);\n\t}\n\tcatch (ex) {\n\t\tex.message += ' in ' + load.name;\n\t\tthrow ex;\n\t}\n\tif (!result.called) {\n\t\tthrow new Error('AMD define not called in ' + load.name);\n\t}\n\treturn result;\n}\n\nfunction _define (result, args) {\n\tvar len, def, arg, undef;\n\n\tlen = args.length;\n\n\tresult.called = true;\n\n\t// last arg is always the factory (or a plain value)\n\tdef = {\n\t\tfactory: ensureFactory(args[--len]),\n\t\tdepsList: undef,\n\t\tname: undef\n\t};\n\n\t// if there are more args\n\tif (len) {\n\t\t// get second-to-last arg\n\t\targ = args[--len];\n\t\tif (typeof arg === 'string') {\n\t\t\tdef.name = arg;\n\t\t}\n\t\telse {\n\t\t\tdef.depsList = arg;\n\t\t}\n\t}\n\n\t// if there are at least one more args and it's a string\n\tif (len && typeof args[--len] === 'string') {\n\t\tdef.name = args[len];\n\t}\n\n\t// if we didn't consume exactly the right number of args\n\tif (len !== 0) {\n\t\tthrow new Error('Unparsable AMD define arguments ['\n\t\t\t+ Array.prototype.slice.call(args) +\n\t\t\t']'\n\t\t);\n\t}\n\n\tif (!def.name) {\n\t\tif (result.isAnon) {\n\t\t\tthrow new Error('Multiple anon defines');\n\t\t}\n\t\tresult.isAnon = true;\n\t\tresult.anon = def;\n\t}\n\telse {\n\t\tresult.named.push(def);\n\t}\n}\n\nfunction ensureFactory (thing) {\n\treturn typeof thing === 'function'\n\t\t? thing\n\t\t: function () { return thing; }\n}\n\n});\n\n","modules":[{"pos":0,"count":113,"id":"rave@0.4.3/lib/amd/captureDefines","depList":["require","exports","module"],"factory":true,"argList":["require","exports","module","define"]}],"compileTime":"2014-11-17T20:58:47.284Z"}